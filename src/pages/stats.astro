---
import BaseLayout from '../layouts/BaseLayout.astro';
import DetonationStats from '../components/DetonationStats.astro';

// Fetch initial stats data
let statsData = {};
try {
  const response = await fetch(new URL('/api/counter', Astro.url));
  statsData = await response.json();
} catch (error) {
  console.error('Failed to fetch stats data:', error);
}
---

<BaseLayout 
  title="Global Nuclear Simulation Statistics" 
  description="Explore comprehensive statistics from nuclear blast simulations worldwide. View heat maps, trends, and detailed analytics."
>
  <div class="container mx-auto px-6 py-12">
    <!-- Page Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">
        Global Simulation Statistics
      </h1>
      <p class="text-xl text-gray-300 max-w-3xl mx-auto">
        Real-time analytics from nuclear blast simulations worldwide
      </p>
    </div>

    <!-- 3 Column Layout: Stats Widget, Top Cities, Top Weapons -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-12">
      <!-- Column 1: Stats Widget -->
      <div class="flex justify-center lg:justify-start">
        <DetonationStats hideViewAllButton={true} />
      </div>
      
      <!-- Column 2: Top Cities -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <div class="flex items-center gap-3 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <h3 class="text-lg font-semibold">Top Targeted Cities</h3>
          </div>
          <div class="space-y-2" id="top-cities-list">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>
      
      <!-- Column 3: Top Weapons -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <div class="flex items-center gap-3 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-warning" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
            <h3 class="text-lg font-semibold">Most Used Weapons</h3>
          </div>
          <div class="space-y-2" id="top-weapons-list">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>

    <!-- World Heatmap -->
    <div class="mb-16">
      <h2 class="text-2xl font-bold mb-6 text-center">Global Detonation Heatmap</h2>
      <div class="card bg-base-100 border border-base-300 overflow-hidden">
        <div class="card-body p-4">
          <div id="heatmap" style="height: 500px; width: 100%; border-radius: 8px;"></div>
        </div>
      </div>
    </div>

    <!-- Additional Statistics Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
      <!-- Time-based Stats -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">Temporal Analysis</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Peak Hour (UTC)</span>
              <span class="font-medium" id="peak-hour">14:00</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Peak Day</span>
              <span class="font-medium" id="peak-day">Tuesday</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Avg. per Hour</span>
              <span class="font-medium" id="avg-per-hour">52</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Weapon Stats -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">Weapon Analytics</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Most Powerful Used</span>
              <span class="font-medium" id="most-powerful">Tsar Bomba</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Average Yield</span>
              <span class="font-medium" id="avg-yield">245 kt</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Unique Weapons</span>
              <span class="font-medium" id="unique-weapons">47</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Geographic Stats -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">Geographic Distribution</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Countries Targeted</span>
              <span class="font-medium" id="countries-targeted">156</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Most Active Region</span>
              <span class="font-medium" id="most-active-region">North America</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Coastal vs Inland</span>
              <span class="font-medium" id="coastal-ratio">65% / 35%</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Blast Type Stats -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">Detonation Types</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Air Burst</span>
              <span class="font-medium text-primary" id="air-burst-pct">78%</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Surface Burst</span>
              <span class="font-medium text-warning" id="surface-burst-pct">22%</span>
            </div>
            <div class="progress mt-2">
              <div class="progress-bar bg-primary" style="width: 78%"></div>
              <div class="progress-bar bg-warning" style="width: 22%"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Environmental Impact -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">Environmental Impact</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Total Fallout Area</span>
              <span class="font-medium" id="fallout-area">125,400 kmÂ²</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Est. Casualties</span>
              <span class="font-medium text-error" id="casualties">2.4M</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Infrastructure Loss</span>
              <span class="font-medium" id="infrastructure">$4.2T</span>
            </div>
          </div>
        </div>
      </div>

      <!-- User Engagement -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <h3 class="text-lg font-semibold mb-4">User Engagement</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-base-content/50">Unique Users</span>
              <span class="font-medium" id="unique-users">45,678</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Avg. Session Time</span>
              <span class="font-medium" id="avg-session">4m 32s</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/50">Return Rate</span>
              <span class="font-medium text-success" id="return-rate">34%</span>
            </div>
          </div>
        </div>
      </div>
    </div>


    <!-- Historical Chart -->
    <div class="mb-16">
      <h2 class="text-2xl font-bold mb-6 text-center">Detonation Timeline</h2>
      <div class="card bg-base-100 border border-base-300 overflow-hidden">
        <div class="card-body">
          <canvas id="timeline-chart" style="max-height: 300px;"></canvas>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .progress {
    height: 0.5rem;
    background: #333;
    border-radius: 9999px;
    overflow: hidden;
    display: flex;
  }

  .progress-bar {
    height: 100%;
    transition: all 0.5s;
  }

  /* Leaflet container styles */
  #heatmap {
    background: #1a1a1a;
    position: relative;
  }
  
  /* Override Leaflet defaults to match simulator */
  .leaflet-control-attribution {
    background: rgba(0, 0, 0, 0.7) !important;
    color: #999 !important;
    font-size: 11px !important;
  }
  
  .leaflet-control-attribution a {
    color: #aaa !important;
  }
  
  .leaflet-control-zoom {
    border: 1px solid #444 !important;
    box-shadow: 0 1px 5px rgba(0,0,0,0.65) !important;
  }
  
  .leaflet-control-zoom a {
    background-color: #222 !important;
    color: #fff !important;
    border-bottom: 1px solid #444 !important;
  }
  
  .leaflet-control-zoom a:hover {
    background-color: #333 !important;
  }
  
  /* Custom popup styles */
  .leaflet-popup-content-wrapper {
    background: rgba(34, 34, 34, 0.95) !important;
    color: #fff !important;
    border: 1px solid #444 !important;
    border-radius: 8px !important;
  }
  
  .leaflet-popup-tip {
    background: rgba(34, 34, 34, 0.95) !important;
    border: 1px solid #444 !important;
  }
  
  .leaflet-popup-content {
    margin: 12px !important;
    line-height: 1.5 !important;
  }

</style>

<!-- Load Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  // Initialize the heatmap
  document.addEventListener('DOMContentLoaded', async function() {
    // First, populate the stats widget
    try {
      const counterResponse = await fetch('/api/counter');
      const counterData = await counterResponse.json();
      
      // Update stats widget elements
      const hiroshimaEl = document.getElementById('stat-hiroshima');
      if (hiroshimaEl && counterData.hiroshimaEquivalents !== undefined) {
        hiroshimaEl.textContent = counterData.hiroshimaEquivalents.toLocaleString();
      }
      
      const mostNukedEl = document.getElementById('stat-most-nuked');
      if (mostNukedEl && counterData.mostTargetedCity) {
        mostNukedEl.textContent = `${counterData.mostTargetedCity.city_name} (${counterData.mostTargetedCity.detonation_count})`;
      }
      
      const yieldEl = document.getElementById('stat-yield');
      if (yieldEl && counterData.totalYieldMT !== undefined) {
        yieldEl.textContent = `${counterData.totalYieldMT.toFixed(2)} MT`;
      }
      
      const weaponEl = document.getElementById('stat-weapon');
      if (weaponEl && counterData.mostUsedWeapon) {
        weaponEl.textContent = counterData.mostUsedWeapon.weapon_name;
      }
      
      // Calculate area destroyed (rough estimate)
      const areaEl = document.getElementById('stat-area');
      if (areaEl && counterData.totalYieldMT) {
        const avgBlastArea = 100; // kmÂ² per MT (rough estimate)
        const totalArea = Math.round(counterData.totalYieldMT * avgBlastArea);
        areaEl.textContent = `${totalArea.toLocaleString()} kmÂ²`;
      }
      
      // Nuclear winter progress
      const winterPercentEl = document.getElementById('nuclear-winter-percent');
      const winterFillEl = document.getElementById('nuclear-winter-fill');
      if (winterPercentEl && winterFillEl && counterData.totalYieldMT) {
        const winterPercent = (counterData.totalYieldMT / 100000) * 100;
        winterPercentEl.textContent = `${winterPercent.toFixed(2)}%`;
        winterFillEl.style.width = `${Math.min(winterPercent, 100)}%`;
      }
      
      // Start peace streak timer
      updatePeaceStreak();
      setInterval(updatePeaceStreak, 1000);
      
    } catch (error) {
      console.error('Failed to populate stats widget:', error);
    }
    
    // Load Leaflet dynamically
    const L = window.L;
    
    // Create map with same configuration as simulator
    const map = L.map('heatmap', {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 20,
      worldCopyJump: true,
      zoomControl: true,
      scrollWheelZoom: true
    });

    // Add dark tile layer (exact same as simulator)
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      subdomains: 'abcd',
      maxZoom: 20,
      className: 'map-tiles'
    }).addTo(map);
    
    // Apply CSS filter to brighten the map slightly (same as simulator)
    const style = document.createElement('style');
    style.textContent = '.map-tiles { filter: brightness(5) contrast(0.7); }';
    document.head.appendChild(style);

    // Fetch real heatmap data from API
    try {
      const response = await fetch('/api/analytics?type=heatmap');
      const result = await response.json();
      
      if (result.data && result.data.locations) {
        // Add circle markers for each location
        result.data.locations.forEach(loc => {
          const radius = Math.min(Math.sqrt(loc.detonation_count) * 5, 50); // Scale radius by count
          const intensity = Math.min(loc.detonation_count / 50, 1); // Normalize intensity
          
          L.circleMarker([loc.latitude, loc.longitude], {
            radius: radius,
            fillColor: `rgba(255, ${120 - intensity * 120}, 0, ${0.4 + intensity * 0.4})`,
            color: '#ff0000',
            weight: 1,
            opacity: 0.8,
            fillOpacity: 0.6
          }).addTo(map).bindPopup(
            `<strong>${loc.city_name || 'Unknown'}, ${loc.country || ''}</strong><br>
            Detonations: ${loc.detonation_count}<br>
            Total Yield: ${loc.total_yield_mt.toFixed(2)} MT`
          );
        });
      }
    } catch (error) {
      console.error('Failed to load heatmap data:', error);
    }

    // Populate top lists
    try {
      // Fetch cities data
      const citiesResponse = await fetch('/api/analytics?type=cities');
      const citiesData = await citiesResponse.json();
      
      // Populate top cities
      const citiesList = document.getElementById('top-cities-list');
      if (citiesData.data && citiesData.data.cities && citiesList) {
        citiesList.innerHTML = citiesData.data.cities.slice(0, 10).map((city, index) => `
          <div class="flex items-center gap-3 p-2 rounded-lg bg-base-100 border-2 ${index === 0 ? 'border-warning/40' : 'border-primary/20'} hover:border-primary/40 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <div class="flex-1 min-w-0">
              <div class="font-medium text-sm truncate">${city.city_name}, ${city.country}</div>
              <div class="text-xs text-base-content/50">${city.detonation_count} detonations â¢ ${city.total_yield_mt.toFixed(1)} MT</div>
            </div>
          </div>
        `).join('');
      }

      // Fetch weapons data
      const weaponsResponse = await fetch('/api/analytics?type=weapons');
      const weaponsData = await weaponsResponse.json();
      
      // Populate top weapons
      const weaponsList = document.getElementById('top-weapons-list');
      if (weaponsData.data && weaponsData.data.weapons && weaponsList) {
        weaponsList.innerHTML = weaponsData.data.weapons.slice(0, 10).map((weapon, index) => {
          const yieldText = weapon.avg_yield_kt >= 1000 ? `${(weapon.avg_yield_kt/1000).toFixed(1)} MT` : `${Math.round(weapon.avg_yield_kt)} kT`;
          return `
            <div class="flex items-center justify-between p-3 rounded-lg bg-base-100 border-2 ${index === 0 ? 'border-warning/40' : 'border-warning/20'} hover:border-warning/40 transition-colors">
              <div class="flex-1">
                <span class="font-medium">${weapon.weapon_name}</span>
                <span class="text-sm text-base-content/50 ml-2">${yieldText} â¢ ${weapon.usage_count.toLocaleString()} uses</span>
              </div>
              <span class="badge badge-outline">${yieldText}</span>
            </div>
          `;
        }).join('');
      }

      // Fetch general analytics
      const allStatsResponse = await fetch('/api/analytics');
      const allStats = await allStatsResponse.json();
      
      if (allStats.data && allStats.data.general) {
        const general = allStats.data.general;
        
        // Update stats with real data
        updateElementText('unique-weapons', general.unique_weapons || '0');
        updateElementText('avg-yield', `${Math.round(general.avg_yield_kt || 0)} kt`);
        updateElementText('countries-targeted', general.unique_cities || '0');
        
        // Calculate percentages for burst types (mock for now)
        const totalDets = general.total_detonations || 1;
        const airBurstPct = 78; // Would need to query from DB
        const surfaceBurstPct = 22;
        updateElementText('air-burst-pct', `${airBurstPct}%`);
        updateElementText('surface-burst-pct', `${surfaceBurstPct}%`);
        
        // Update progress bars
        const progressBar = document.querySelector('.progress-bar.bg-primary');
        if (progressBar) progressBar.style.width = `${airBurstPct}%`;
        const progressBar2 = document.querySelector('.progress-bar.bg-warning');
        if (progressBar2) progressBar2.style.width = `${surfaceBurstPct}%`;
      }
      
      // Get time patterns
      if (allStats.data && allStats.data.hourlyPatterns) {
        const maxHour = allStats.data.hourlyPatterns.reduce((max, curr) => 
          curr.count > max.count ? curr : max, allStats.data.hourlyPatterns[0]);
        updateElementText('peak-hour', `${maxHour.hour_of_day || 14}:00 UTC`);
      }
      
      if (allStats.data && allStats.data.dayOfWeekPatterns) {
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const maxDay = allStats.data.dayOfWeekPatterns.reduce((max, curr) => 
          curr.count > max.count ? curr : max, allStats.data.dayOfWeekPatterns[0]);
        updateElementText('peak-day', days[maxDay.day_of_week] || 'Tuesday');
      }

    } catch (error) {
      console.error('Failed to load detailed stats:', error);
    }

    // Initialize timeline chart
    initializeTimelineChart();
  });

  function updateElementText(id, text) {
    const element = document.getElementById(id);
    if (element) element.textContent = text;
  }
  
  // Update peace streak timer
  let lastDetonationTime = Date.now() - (30 * 60 * 1000); // Default to 30 minutes ago
  
  function updatePeaceStreak() {
    const now = Date.now();
    const timeSince = now - lastDetonationTime;
    
    const seconds = Math.floor(timeSince / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    let streakText;
    if (days > 0) {
      streakText = `${days}d ${hours % 24}h`;
    } else if (hours > 0) {
      streakText = `${hours}h ${minutes % 60}m`;
    } else if (minutes > 0) {
      streakText = `${minutes}m ${seconds % 60}s`;
    } else {
      streakText = `${seconds}s`;
    }
    
    const peaceEl = document.getElementById('stat-peace');
    if (peaceEl) peaceEl.textContent = streakText;
  }

  function initializeTimelineChart() {
    const canvas = document.getElementById('timeline-chart');
    if (!canvas) return;

    // This would typically use Chart.js or similar
    // For now, just a placeholder
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#444';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = '#888';
    ctx.font = '16px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('Timeline visualization would go here', canvas.width / 2, canvas.height / 2);
  }
</script>