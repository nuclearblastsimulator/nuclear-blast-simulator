---
import BaseLayout from '../layouts/BaseLayout.astro';
import DetonationStats from '../components/DetonationStats.astro';

// Fetch initial stats data (only in production)
let statsData = {};
try {
  // Skip fetching during development or if running locally
  if (import.meta.env.PROD && Astro.url.hostname !== 'localhost') {
    const response = await fetch(new URL('/api/counter', Astro.url));
    if (response.ok) {
      statsData = await response.json();
    }
  }
} catch (error) {
  console.error('Failed to fetch stats data:', error);
}
---

<BaseLayout 
  title="Global Nuclear Simulation Statistics" 
  description="Explore comprehensive statistics from nuclear blast simulations worldwide. View heat maps, trends, and detailed analytics."
>
  <div class="container mx-auto px-6 py-12">
    <!-- Page Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">
        Global Simulation Statistics
      </h1>
      <p class="text-xl text-gray-300 max-w-3xl mx-auto">
        Real-time analytics from nuclear blast simulations worldwide
      </p>
    </div>

    <!-- Stats Widget - Centered at Top -->
    <div class="mb-12">
      <div class="flex justify-center">
        <DetonationStats hideViewAllButton={true} />
      </div>
    </div>

    <!-- World Heatmap -->
    <div class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-center">Global Detonation Heatmap</h2>
      <div class="card bg-base-100 border border-base-300 overflow-hidden">
        <div class="card-body p-4">
          <div id="heatmap" style="height: 500px; width: 100%; border-radius: 8px;"></div>
        </div>
      </div>
    </div>

    <!-- 2 Column Layout: Top Cities, Top Weapons -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-12">
      <!-- Column 1: Top Cities -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <div class="flex items-center gap-3 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <h3 class="text-lg font-semibold">Top Targeted Cities</h3>
          </div>
          <div class="space-y-2" id="top-cities-list">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>
      
      <!-- Column 2: Top Weapons -->
      <div class="card bg-base-100 border border-base-300 overflow-hidden h-full flex flex-col">
        <div class="card-body">
          <div class="flex items-center gap-3 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-warning" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
            <h3 class="text-lg font-semibold">Most Used Weapons</h3>
          </div>
          <div class="space-y-2" id="top-weapons-list">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>



    <!-- Historical Chart -->
    <div class="mb-16">
      <h2 class="text-2xl font-bold mb-6 text-center">Last 30 Days Activity</h2>
      <div class="card bg-base-100 border border-base-300 overflow-hidden">
        <div class="card-body">
          <canvas id="timeline-chart" style="max-height: 300px;"></canvas>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .progress {
    height: 0.5rem;
    background: #333;
    border-radius: 9999px;
    overflow: hidden;
    display: flex;
  }

  .progress-bar {
    height: 100%;
    transition: all 0.5s;
  }

  /* Leaflet container styles */
  #heatmap {
    background: #1a1a1a;
    position: relative;
  }
  
  /* Override Leaflet defaults to match simulator */
  .leaflet-control-attribution {
    background: rgba(0, 0, 0, 0.7) !important;
    color: #999 !important;
    font-size: 11px !important;
  }
  
  .leaflet-control-attribution a {
    color: #aaa !important;
  }
  
  .leaflet-control-zoom {
    border: 1px solid #444 !important;
    box-shadow: 0 1px 5px rgba(0,0,0,0.65) !important;
  }
  
  .leaflet-control-zoom a {
    background-color: #222 !important;
    color: #fff !important;
    border-bottom: 1px solid #444 !important;
  }
  
  .leaflet-control-zoom a:hover {
    background-color: #333 !important;
  }
  
  /* Custom popup styles */
  .leaflet-popup-content-wrapper {
    background: rgba(34, 34, 34, 0.95) !important;
    color: #fff !important;
    border: 1px solid #444 !important;
    border-radius: 8px !important;
  }
  
  .leaflet-popup-tip {
    background: rgba(34, 34, 34, 0.95) !important;
    border: 1px solid #444 !important;
  }
  
  .leaflet-popup-content {
    margin: 12px !important;
    line-height: 1.5 !important;
  }

</style>

<!-- Load Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<!-- Load Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  // Initialize the heatmap
  document.addEventListener('DOMContentLoaded', async function() {
    // First, populate the stats widget
    try {
      // Add timeout to prevent indefinite pending state
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      const counterResponse = await fetch('/api/counter', {
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      
      const counterData = await counterResponse.json();
      
      // Update stats widget elements
      const hiroshimaEl = document.getElementById('stat-hiroshima');
      if (hiroshimaEl && counterData.hiroshimaEquivalents !== undefined) {
        hiroshimaEl.textContent = counterData.hiroshimaEquivalents.toLocaleString();
      }
      
      const mostNukedEl = document.getElementById('stat-most-nuked');
      if (mostNukedEl && counterData.mostTargetedCity) {
        mostNukedEl.textContent = `${counterData.mostTargetedCity.city_name} (${counterData.mostTargetedCity.detonation_count})`;
      }
      
      const yieldEl = document.getElementById('stat-yield');
      if (yieldEl && counterData.totalYieldMT !== undefined) {
        yieldEl.textContent = `${counterData.totalYieldMT.toFixed(2)} MT`;
      }
      
      const weaponEl = document.getElementById('stat-weapon');
      if (weaponEl && counterData.mostUsedWeapon) {
        weaponEl.textContent = counterData.mostUsedWeapon.weapon_name;
      }
      
      // Calculate area destroyed (rough estimate)
      const areaEl = document.getElementById('stat-area');
      if (areaEl && counterData.totalYieldMT) {
        const avgBlastArea = 100; // km² per MT (rough estimate)
        const totalArea = Math.round(counterData.totalYieldMT * avgBlastArea);
        areaEl.textContent = `${totalArea.toLocaleString()} km²`;
      }
      
      // Nuclear winter progress
      const winterPercentEl = document.getElementById('nuclear-winter-percent');
      const winterFillEl = document.getElementById('nuclear-winter-fill');
      if (winterPercentEl && winterFillEl && counterData.totalYieldMT) {
        const winterPercent = (counterData.totalYieldMT / 100000) * 100;
        winterPercentEl.textContent = `${winterPercent.toFixed(2)}%`;
        winterFillEl.style.width = `${Math.min(winterPercent, 100)}%`;
      }
      
      // Update total detonations
      const detonationsEl = document.getElementById('stat-detonations');
      if (detonationsEl && counterData.totalDetonations !== undefined) {
        detonationsEl.textContent = counterData.totalDetonations.toLocaleString();
      }
      
    } catch (error) {
      console.error('Failed to populate stats widget:', error);
    }
    
    // Load Leaflet dynamically
    const L = window.L;
    
    // Create map with same configuration as simulator
    const map = L.map('heatmap', {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 20,
      worldCopyJump: true,
      zoomControl: true,
      scrollWheelZoom: true
    });

    // Add dark tile layer (exact same as simulator)
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      subdomains: 'abcd',
      maxZoom: 20,
      className: 'map-tiles'
    }).addTo(map);
    
    // Apply CSS filter to brighten the map slightly (same as simulator)
    const style = document.createElement('style');
    style.textContent = '.map-tiles { filter: brightness(5) contrast(0.7); }';
    document.head.appendChild(style);

    // Fetch real heatmap data from API
    try {
      const response = await fetch(`/api/analytics?type=heatmap&t=${Date.now()}`);
      const result = await response.json();
      
      if (result.data && result.data.locations) {
        // Add circle markers for each location
        result.data.locations.forEach(loc => {
          const radius = Math.min(Math.sqrt(loc.detonation_count) * 5, 50); // Scale radius by count
          const intensity = Math.min(loc.detonation_count / 50, 1); // Normalize intensity
          
          L.circleMarker([loc.latitude, loc.longitude], {
            radius: radius,
            fillColor: `rgba(255, ${120 - intensity * 120}, 0, ${0.4 + intensity * 0.4})`,
            color: '#ff0000',
            weight: 1,
            opacity: 0.8,
            fillOpacity: 0.6
          }).addTo(map).bindPopup(
            `<strong>${loc.city_name || 'Unknown'}, ${loc.country || ''}</strong><br>
            Detonations: ${loc.detonation_count}<br>
            Total Yield: ${loc.total_yield_mt.toFixed(2)} MT`
          );
        });
      }
    } catch (error) {
      console.error('Failed to load heatmap data:', error);
    }

    // Populate top lists
    try {
      // Fetch cities data
      const citiesResponse = await fetch(`/api/analytics?type=cities&t=${Date.now()}`);
      const citiesData = await citiesResponse.json();
      
      // Populate top cities
      const citiesList = document.getElementById('top-cities-list');
      if (citiesData.data && citiesData.data.cities && citiesList) {
        citiesList.innerHTML = citiesData.data.cities.slice(0, 10).map((city, index) => `
          <div class="flex items-center gap-3 p-2 rounded-lg bg-base-100 border-2 ${index === 0 ? 'border-warning/40' : 'border-primary/20'} hover:border-primary/40 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <div class="flex-1 min-w-0">
              <div class="font-medium text-sm truncate">${city.city_name}, ${city.country}</div>
              <div class="text-xs text-base-content/50">${city.detonation_count} detonations • ${city.total_yield_mt.toFixed(1)} MT</div>
            </div>
          </div>
        `).join('');
      }

      // Fetch weapons data
      const weaponsResponse = await fetch(`/api/analytics?type=weapons&t=${Date.now()}`);
      const weaponsData = await weaponsResponse.json();
      
      // Populate top weapons
      const weaponsList = document.getElementById('top-weapons-list');
      if (weaponsData.data && weaponsData.data.weapons && weaponsList) {
        weaponsList.innerHTML = weaponsData.data.weapons.slice(0, 10).map((weapon, index) => {
          const yieldText = weapon.avg_yield_kt >= 1000 ? `${(weapon.avg_yield_kt/1000).toFixed(1)} MT` : `${Math.round(weapon.avg_yield_kt)} kT`;
          return `
            <div class="flex items-center justify-between p-3 rounded-lg bg-base-100 border-2 ${index === 0 ? 'border-warning/40' : 'border-warning/20'} hover:border-warning/40 transition-colors">
              <div class="flex-1">
                <span class="font-medium">${weapon.weapon_name}</span>
                <span class="text-sm text-base-content/50 ml-2">${yieldText} • ${weapon.usage_count.toLocaleString()} uses</span>
              </div>
              <span class="badge badge-outline">${yieldText}</span>
            </div>
          `;
        }).join('');
      }


    } catch (error) {
      console.error('Failed to load detailed stats:', error);
    }

    // Initialize timeline chart
    initializeTimelineChart();
  });

  

  async function initializeTimelineChart() {
    const canvas = document.getElementById('timeline-chart');
    if (!canvas) return;

    try {
      // Fetch timeline data
      const response = await fetch(`/api/analytics?type=timeline&t=${Date.now()}`);
      const result = await response.json();
      
      if (!result.data) {
        console.error('No timeline data available');
        return;
      }

      // Use daily data for all-time view
      let chartData, labels, detonationCounts, yieldData;
      
      if (result.data.daily && result.data.daily.length > 0) {
        // Process daily data (all-time)
        const dailyData = result.data.daily.reverse(); // Reverse to show oldest first
        
        labels = dailyData.map(d => {
          const date = new Date(d.date);
          return date.toLocaleDateString('en-US', { 
            month: 'short',
            day: 'numeric'
          });
        });
        
        detonationCounts = dailyData.map(d => d.total_detonations);
        yieldData = dailyData.map(d => d.total_yield_mt || 0);
      } else if (result.data.hourly) {
        // Fallback to hourly data if daily not available
        const hourlyData = result.data.hourly.reverse();
        
        labels = hourlyData.map(d => {
          const date = new Date(d.hour);
          return date.toLocaleString('en-US', { 
            month: 'short',
            day: 'numeric',
            hour: 'numeric',
            hour12: true 
          });
        });
        
        detonationCounts = hourlyData.map(d => d.detonations);
        yieldData = hourlyData.map(d => d.total_yield_mt || 0);
      } else {
        console.error('No timeline data in response');
        return;
      }

      // Create gradient
      const ctx = canvas.getContext('2d');
      const gradient = ctx.createLinearGradient(0, 0, 0, 300);
      gradient.addColorStop(0, 'rgba(255, 99, 71, 0.8)');
      gradient.addColorStop(1, 'rgba(255, 99, 71, 0.1)');

      const gradientYield = ctx.createLinearGradient(0, 0, 0, 300);
      gradientYield.addColorStop(0, 'rgba(255, 206, 86, 0.8)');
      gradientYield.addColorStop(1, 'rgba(255, 206, 86, 0.1)');

      // Chart configuration
      const config = {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Detonations',
              data: detonationCounts,
              borderColor: 'rgb(255, 99, 71)',
              backgroundColor: gradient,
              fill: true,
              tension: 0.4,
              pointRadius: 4,
              pointHoverRadius: 6,
              pointBackgroundColor: 'rgb(255, 99, 71)',
              pointBorderColor: '#1a1a1a',
              pointBorderWidth: 2,
              yAxisID: 'y-detonations',
            },
            {
              label: 'Total Yield (MT)',
              data: yieldData,
              borderColor: 'rgb(255, 206, 86)',
              backgroundColor: gradientYield,
              fill: true,
              tension: 0.4,
              pointRadius: 4,
              pointHoverRadius: 6,
              pointBackgroundColor: 'rgb(255, 206, 86)',
              pointBorderColor: '#1a1a1a',
              pointBorderWidth: 2,
              yAxisID: 'y-yield',
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            title: {
              display: false
            },
            legend: {
              display: true,
              position: 'top',
              labels: {
                color: '#999',
                font: {
                  size: 12
                },
                padding: 20,
                usePointStyle: true,
                pointStyle: 'circle'
              }
            },
            tooltip: {
              backgroundColor: 'rgba(34, 34, 34, 0.95)',
              titleColor: '#fff',
              bodyColor: '#ccc',
              borderColor: '#444',
              borderWidth: 1,
              padding: 12,
              cornerRadius: 8,
              displayColors: true,
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    if (context.dataset.yAxisID === 'y-yield') {
                      label += context.parsed.y.toFixed(2) + ' MT';
                    } else {
                      label += context.parsed.y;
                    }
                  }
                  return label;
                }
              }
            }
          },
          scales: {
            x: {
              display: true,
              grid: {
                display: true,
                color: 'rgba(255, 255, 255, 0.05)',
                drawBorder: false
              },
              ticks: {
                color: '#666',
                font: {
                  size: 11
                },
                maxRotation: 45,
                minRotation: 45,
                autoSkip: true,
                maxTicksLimit: 20
              }
            },
            'y-detonations': {
              type: 'linear',
              display: true,
              position: 'left',
              grid: {
                display: true,
                color: 'rgba(255, 255, 255, 0.05)',
                drawBorder: false
              },
              ticks: {
                color: '#666',
                font: {
                  size: 11
                },
                callback: function(value) {
                  return value;
                }
              },
              title: {
                display: true,
                text: 'Detonations',
                color: '#999',
                font: {
                  size: 12
                }
              }
            },
            'y-yield': {
              type: 'linear',
              display: true,
              position: 'right',
              grid: {
                display: false
              },
              ticks: {
                color: '#666',
                font: {
                  size: 11
                },
                callback: function(value) {
                  return value.toFixed(1) + ' MT';
                }
              },
              title: {
                display: true,
                text: 'Total Yield',
                color: '#999',
                font: {
                  size: 12
                }
              }
            }
          }
        }
      };

      // Create the chart
      new Chart(ctx, config);

    } catch (error) {
      console.error('Failed to initialize timeline chart:', error);
    }
  }
</script>