---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';
import { getReadingMeta } from '../../utils/reading-time.js';

export async function getStaticPaths() {
  const history = await getCollection('history');
  
  return history.map((entry) => ({
    params: { slug: entry.slug.replace('history/', '') },
    props: { entry, allHistory: history },
  }));
}

interface Props {
  entry: CollectionEntry<'history'>;
  allHistory: CollectionEntry<'history'>[];
}

const { entry, allHistory } = Astro.props;
const { Content } = await entry.render();

// Check if content has the summary marker
const hasTabSeparator = entry.body.includes('<!-- SUMMARY_END -->');

// Extract summary and full content for reading time calculation
let summaryText = '';
let fullText = '';
if (hasTabSeparator) {
  const parts = entry.body.split('<!-- SUMMARY_END -->');
  summaryText = parts[0] || '';
  fullText = parts[1] || '';
}

const readingMeta = hasTabSeparator ? getReadingMeta(summaryText, fullText) : null;

// Dynamically group articles by their directory structure
const categories: Record<string, any[]> = {};

// Group articles by category folder
allHistory.forEach(article => {
  // Remove 'history/' prefix from slug to get the actual path
  const path = article.slug.replace('history/', '');
  const parts = path.split('/');
  
  if (parts.length >= 1) {
    const categoryFolder = parts[0]; // Get the category folder name
    
    // Convert folder name to display name (e.g., 'historical-events' -> 'Historical Events')
    const displayName = categoryFolder.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
    
    if (!categories[displayName]) {
      categories[displayName] = [];
    }
    categories[displayName].push(article);
  }
});

// Sort articles within each category and sort categories alphabetically
const sortedCategories = Object.keys(categories).sort().reduce((acc, key) => {
  acc[key] = categories[key].sort((a, b) => a.data.title.localeCompare(b.data.title));
  return acc;
}, {} as Record<string, any[]>);

const currentSlug = entry.slug.replace('history/', '');
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="min-h-screen flex">
    <!-- Mobile Menu Toggle -->
    <button class="lg:hidden fixed bottom-4 left-4 z-50 btn btn-circle btn-primary shadow-lg" onclick="document.getElementById('sidebar').classList.toggle('-translate-x-full')">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>

    <!-- Sidebar -->
    <aside id="sidebar" class="fixed lg:sticky top-0 left-0 z-40 w-80 h-screen bg-base-200 border-r border-base-300 overflow-y-auto transition-transform -translate-x-full lg:translate-x-0">
      <div class="p-6">
        <div class="mb-6">
          <a href="/history/" class="text-lg font-semibold text-primary hover:text-primary-focus transition-colors">
            ‚Üê All History Articles
          </a>
        </div>
        
        <!-- Categories -->
        <div class="space-y-4">
          {Object.entries(sortedCategories).map(([categoryName, articles], index) => {
            // Check if current article is in this category
            const hasActiveArticle = articles.some(article => article.slug.endsWith(currentSlug));
            const categoryId = `category-${index}`;
            
            return (
              <div class="collapse collapse-arrow bg-base-300/50 rounded-lg">
                <input 
                  type="checkbox" 
                  id={categoryId}
                  checked={hasActiveArticle}
                />
                <label for={categoryId} class="collapse-title text-sm font-bold text-base-content/80 py-2 px-3 min-h-0 cursor-pointer">
                  {categoryName}
                </label>
                <div class="collapse-content px-1">
                  <ul class="space-y-0.5 mt-1">
                    {articles.map((article) => {
                      const isActive = article.slug.endsWith(currentSlug);
                      return (
                        <li>
                          <a 
                            href={`/history/${article.slug.replace('history/', '')}/`}
                            class={`block text-sm py-1.5 px-3 rounded transition-all ${
                              isActive 
                                ? 'bg-primary text-primary-content font-medium active-article' 
                                : 'text-base-content/70 hover:text-base-content hover:bg-base-300'
                            }`}
                          >
                            {article.data.title}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 lg:ml-0">
      <!-- Hero Section -->
      <section class="relative py-16 px-6 bg-gradient-to-b from-base-200 to-base-100">
        <div class="absolute inset-0 opacity-5">
          <div class="absolute inset-0" style="background-image: radial-gradient(circle at 25% 25%, hsl(var(--p)) 0%, transparent 50%), radial-gradient(circle at 75% 75%, hsl(var(--s)) 0%, transparent 50%);"></div>
        </div>
        <div class="relative container max-w-4xl mx-auto">
          <div class="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-secondary/10 border border-secondary/20 mb-4">
            <span class="text-secondary text-sm font-medium">Historical Article</span>
          </div>
          <h2 class="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            Topic: {entry.data.title}
          </h2>
          <p class="text-xl text-base-content/70 max-w-3xl">
            {entry.data.description}
          </p>
        </div>
      </section>

      <!-- Content Section -->
      <article class="container max-w-4xl mx-auto px-6 py-12 history-article">
        <!-- Reading progress indicator -->
        <div id="reading-progress" class="reading-progress"></div>
        
        <div class="bg-base-100 rounded-3xl border border-base-300 p-8 md:p-12 shadow-xl">
          {hasTabSeparator && readingMeta ? (
            <>
              <!-- Reading metadata -->
              <div class="reading-meta mb-6">
                <span class="summary-indicator">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  {readingMeta.summaryReadTime} min overview
                </span>
                <span class="full-indicator">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  {readingMeta.fullReadTime} min deep dive
                </span>
              </div>
              
              <!-- Article Content with Progressive Disclosure -->
              <div id="article-content" class="prose prose-lg max-w-none prose-headings:font-bold prose-h2:text-3xl prose-h2:mt-12 prose-h2:mb-6 prose-h3:text-2xl prose-h3:mt-8 prose-h3:mb-4 prose-p:leading-relaxed prose-a:transition-colors prose-a:duration-200 prose-strong:text-secondary prose-li:marker:text-secondary/60">
                <!-- Summary content (always visible) -->
                <div class="article-summary" id="summary-content">
                  <div class="summary-text" id="summary-text">
                    <!-- Summary content will be populated by JavaScript -->
                  </div>
                  
                  <!-- Expansion trigger -->
                  <div class="expansion-trigger" id="expansion-trigger">
                    <button class="continue-reading-btn" id="expand-btn">
                      <span class="btn-text">Continue Reading</span>
                      <span class="btn-subtitle">Explore the complete story</span>
                      <svg xmlns="http://www.w3.org/2000/svg" class="arrow h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <!-- Full article (hidden initially) -->
                <div class="full-article" id="full-article">
                  <div class="article-transition">
                    <hr class="section-divider">
                  </div>
                  
                  <div class="full-content" id="full-content">
                    <!-- Full content will be populated by JavaScript -->
                  </div>
                </div>
                
                <!-- Hidden container for original content -->
                <div class="original-content" style="display: none;">
                  <Content />
                </div>
              </div>
            </>
          ) : (
            <!-- Regular content without summary/full split -->
            <div class="prose prose-lg max-w-none prose-headings:font-bold prose-h2:text-3xl prose-h2:mt-12 prose-h2:mb-6 prose-h3:text-2xl prose-h3:mt-8 prose-h3:mb-4 prose-p:leading-relaxed prose-a:transition-colors prose-a:duration-200 prose-strong:text-secondary prose-li:marker:text-secondary/60">
              <Content />
            </div>
          )}
        </div>
        
        <!-- Navigation -->
        <nav class="mt-12 flex items-center justify-between">
          <a href="/history/" class="btn btn-outline gap-2 group lg:hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:-translate-x-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Back to History
          </a>
          
          <div class="flex gap-3 ml-auto">
            <a href="/terms/" class="btn btn-ghost btn-sm">
              Glossary
            </a>
            <a href="/simulator/" class="btn btn-primary btn-sm">
              Launch Simulator
            </a>
          </div>
        </nav>
      </article>

      <!-- Related Content Section -->
      <section class="py-16 px-6 bg-gradient-to-t from-base-200 to-base-100">
        <div class="container max-w-6xl mx-auto text-center">
          <h2 class="text-3xl font-bold mb-8">Continue Exploring</h2>
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/history/" class="btn btn-outline btn-lg">
              More History Articles
            </a>
            <a href="/simulator/" class="btn btn-primary btn-lg group">
              <span>Launch Simulator</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </a>
          </div>
        </div>
      </section>
    </main>
  </div>
  
  <script>
    // Progressive Disclosure Article Display
    class ArticleDisplay {
      constructor() {
        this.expandBtn = document.getElementById('expand-btn');
        this.summaryContent = document.getElementById('summary-content');
        this.summaryText = document.getElementById('summary-text');
        this.fullArticle = document.getElementById('full-article');
        this.fullContent = document.getElementById('full-content');
        this.expansionTrigger = document.getElementById('expansion-trigger');
        this.progressBar = document.getElementById('reading-progress');
        this.originalContent = document.querySelector('.original-content');
        
        this.isExpanded = false;
        this.autoExpandTriggered = false;
        
        if (this.originalContent && this.summaryText && this.fullContent) {
          this.init();
        }
      }
      
      init() {
        // Extract and populate summary and full content
        this.populateContent();
        
        // Manual expansion handler
        if (this.expandBtn) {
          this.expandBtn.addEventListener('click', () => this.expandArticle());
        }
        
        // Scroll-based auto-expansion
        this.setupScrollTrigger();
        
        // Reading progress
        this.setupReadingProgress();
        
        // Handle URL hash for direct linking to full article
        if (window.location.hash === '#full') {
          this.expandArticle(false);
        }
      }
      
      populateContent() {
        // Get all content from the original container
        const allNodes = Array.from(this.originalContent.childNodes);
        let summaryHTML = '';
        let fullHTML = '';
        let foundMarker = false;
        
        allNodes.forEach(node => {
          if (node.nodeType === Node.COMMENT_NODE && node.textContent.trim() === 'SUMMARY_END') {
            foundMarker = true;
          } else if (!foundMarker) {
            if (node.nodeType === Node.ELEMENT_NODE) {
              summaryHTML += node.outerHTML;
            } else if (node.nodeType === Node.TEXT_NODE) {
              summaryHTML += node.textContent;
            }
          } else {
            if (node.nodeType === Node.ELEMENT_NODE) {
              fullHTML += node.outerHTML;
            } else if (node.nodeType === Node.TEXT_NODE) {
              fullHTML += node.textContent;
            }
          }
        });
        
        // Populate the sections
        this.summaryText.innerHTML = summaryHTML;
        this.fullContent.innerHTML = fullHTML;
      }
      
      setupScrollTrigger() {
        if (!this.expansionTrigger) return;
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && !this.autoExpandTriggered && !this.isExpanded) {
              // User has scrolled to the expansion trigger
              this.suggestExpansion();
            }
          });
        }, {
          threshold: 0.8,
          rootMargin: '0px 0px -100px 0px'
        });
        
        // Observe the expansion trigger area
        observer.observe(this.expansionTrigger);
      }
      
      suggestExpansion() {
        if (this.isExpanded || this.autoExpandTriggered) return;
        
        this.autoExpandTriggered = true;
        
        // Add gentle pulse animation to suggest expansion
        if (this.expandBtn) {
          this.expandBtn.classList.add('pulse-suggestion');
        }
        
        // Auto-expand after short delay if user continues scrolling
        setTimeout(() => {
          if (this.isUserStillReading() && !this.isExpanded) {
            this.expandArticle(true);
          }
        }, 2000);
      }
      
      isUserStillReading() {
        // Check if user is still engaged (hasn't left page, is scrolling, etc.)
        return document.hasFocus() && !document.hidden;
      }
      
      expandArticle(animated = true) {
        if (this.isExpanded) return;
        
        this.isExpanded = true;
        
        if (animated) {
          // Smooth expansion animation
          this.fullArticle.style.maxHeight = this.fullArticle.scrollHeight + 'px';
          this.fullArticle.classList.add('expanding');
          
          setTimeout(() => {
            this.fullArticle.classList.add('expanded');
            this.fullArticle.style.maxHeight = 'none';
          }, 50);
        } else {
          // Instant expansion
          this.fullArticle.classList.add('expanded');
        }
        
        // Update button state
        if (this.expandBtn) {
          this.expandBtn.innerHTML = `
            <span class="btn-text">Reading Full Article</span>
            <span class="btn-subtitle">Scroll to continue</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          `;
          this.expandBtn.disabled = true;
          this.expandBtn.classList.add('btn-success');
        }
        
        // Update URL for sharing
        if (history.pushState) {
          history.pushState(null, null, '#full');
        }
        
        // Analytics tracking
        this.trackExpansion(animated ? 'auto' : 'manual');
      }
      
      setupReadingProgress() {
        window.addEventListener('scroll', () => {
          const article = document.querySelector('.history-article');
          if (!article) return;
          
          const articleHeight = article.offsetHeight;
          const windowHeight = window.innerHeight;
          const scrolled = window.scrollY;
          const articleTop = article.offsetTop;
          
          // Calculate reading progress
          const progress = Math.min(
            Math.max((scrolled - articleTop) / (articleHeight - windowHeight), 0),
            1
          );
          
          if (this.progressBar) {
            this.progressBar.style.width = (progress * 100) + '%';
          }
        });
      }
      
      trackExpansion(method) {
        // Analytics tracking for expansion events
        if (typeof gtag !== 'undefined') {
          gtag('event', 'article_expand', {
            'method': method,
            'article_slug': window.location.pathname.split('/').pop()
          });
        }
      }
    }
    
    // Scroll to the active article in the sidebar on page load
    document.addEventListener('DOMContentLoaded', () => {
      const activeArticle = document.querySelector('.active-article');
      if (activeArticle) {
        const sidebar = document.getElementById('sidebar');
        
        // Make sure the parent collapse is expanded
        const parentCollapse = activeArticle.closest('.collapse');
        if (parentCollapse) {
          const input = parentCollapse.querySelector('input[type="checkbox"]');
          if (input) {
            input.checked = true;
          }
        }
        
        // Wait a bit for the collapse animation
        setTimeout(() => {
          const activeRect = activeArticle.getBoundingClientRect();
          const sidebarRect = sidebar.getBoundingClientRect();
          
          // Calculate the scroll position to center the active article in the viewport
          const scrollTop = activeArticle.offsetTop - (sidebar.clientHeight / 2) + (activeArticle.clientHeight / 2);
          
          // Scroll the sidebar
          sidebar.scrollTop = scrollTop;
        }, 100);
      }
      
      // Initialize progressive disclosure for articles with summary/full content
      const hasProgressiveContent = document.querySelector('.original-content');
      if (hasProgressiveContent) {
        new ArticleDisplay();
      }
    });
  </script>
</BaseLayout>