---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const history = await getCollection('history');
  
  return history.map((entry) => ({
    params: { slug: entry.slug.replace('history/', '') },
    props: { entry, allHistory: history },
  }));
}

interface Props {
  entry: CollectionEntry<'history'>;
  allHistory: CollectionEntry<'history'>[];
}

const { entry, allHistory } = Astro.props;
const { Content } = await entry.render();

// Check if content has the summary marker
const hasTabSeparator = entry.body.includes('<!-- SUMMARY_END -->');

// Dynamically group articles by their directory structure
const categories: Record<string, any[]> = {};

// Group articles by category folder
allHistory.forEach(article => {
  // Remove 'history/' prefix from slug to get the actual path
  const path = article.slug.replace('history/', '');
  const parts = path.split('/');
  
  if (parts.length >= 1) {
    const categoryFolder = parts[0]; // Get the category folder name
    
    // Convert folder name to display name (e.g., 'historical-events' -> 'Historical Events')
    const displayName = categoryFolder.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
    
    if (!categories[displayName]) {
      categories[displayName] = [];
    }
    categories[displayName].push(article);
  }
});

// Sort articles within each category and sort categories alphabetically
const sortedCategories = Object.keys(categories).sort().reduce((acc, key) => {
  acc[key] = categories[key].sort((a, b) => a.data.title.localeCompare(b.data.title));
  return acc;
}, {} as Record<string, any[]>);

const currentSlug = entry.slug.replace('history/', '');
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="min-h-screen flex">
    <!-- Mobile Menu Toggle -->
    <button class="lg:hidden fixed bottom-4 left-4 z-50 btn btn-circle btn-primary shadow-lg" onclick="document.getElementById('sidebar').classList.toggle('-translate-x-full')">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>

    <!-- Sidebar -->
    <aside id="sidebar" class="fixed lg:sticky top-0 left-0 z-40 w-80 h-screen bg-base-200 border-r border-base-300 overflow-y-auto transition-transform -translate-x-full lg:translate-x-0">
      <div class="p-6">
        <div class="mb-6">
          <a href="/history/" class="text-lg font-semibold text-primary hover:text-primary-focus transition-colors">
            ‚Üê All History Articles
          </a>
        </div>
        
        <!-- Categories -->
        <div class="space-y-4">
          {Object.entries(sortedCategories).map(([categoryName, articles], index) => {
            // Check if current article is in this category
            const hasActiveArticle = articles.some(article => article.slug.endsWith(currentSlug));
            const categoryId = `category-${index}`;
            
            return (
              <div class="collapse collapse-arrow bg-base-300/50 rounded-lg">
                <input 
                  type="checkbox" 
                  id={categoryId}
                  checked={hasActiveArticle}
                />
                <label for={categoryId} class="collapse-title text-sm font-bold text-base-content/80 py-2 px-3 min-h-0 cursor-pointer">
                  {categoryName}
                </label>
                <div class="collapse-content px-1">
                  <ul class="space-y-0.5 mt-1">
                    {articles.map((article) => {
                      const isActive = article.slug.endsWith(currentSlug);
                      return (
                        <li>
                          <a 
                            href={`/history/${article.slug.replace('history/', '')}/`}
                            class={`block text-sm py-1.5 px-3 rounded transition-all ${
                              isActive 
                                ? 'bg-primary text-primary-content font-medium active-article' 
                                : 'text-base-content/70 hover:text-base-content hover:bg-base-300'
                            }`}
                          >
                            {article.data.title}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 lg:ml-0">
      <!-- Hero Section -->
      <section class="relative py-16 px-6 bg-gradient-to-b from-base-200 to-base-100">
        <div class="absolute inset-0 opacity-5">
          <div class="absolute inset-0" style="background-image: radial-gradient(circle at 25% 25%, hsl(var(--p)) 0%, transparent 50%), radial-gradient(circle at 75% 75%, hsl(var(--s)) 0%, transparent 50%);"></div>
        </div>
        <div class="relative container max-w-4xl mx-auto">
          <div class="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-secondary/10 border border-secondary/20 mb-4">
            <span class="text-secondary text-sm font-medium">Historical Article</span>
          </div>
          <h1 class="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            {entry.data.title}
          </h1>
          <p class="text-xl text-base-content/70 max-w-3xl">
            {entry.data.description}
          </p>
        </div>
      </section>

      <!-- Content Section -->
      <article class="container max-w-4xl mx-auto px-6 py-12">
        <div class="bg-base-100 rounded-3xl border border-base-300 p-8 md:p-12 shadow-xl">
          {hasTabSeparator ? (
            <>
              <!-- Summary Toggle Button -->
              <div class="flex justify-end mb-6">
                <button id="summary-toggle" class="btn btn-outline btn-sm gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Show Summary
                </button>
              </div>
              
              <!-- Article Content -->
              <div id="article-content" class="prose prose-lg max-w-none prose-headings:font-bold prose-h2:text-3xl prose-h2:mt-12 prose-h2:mb-6 prose-h3:text-2xl prose-h3:mt-8 prose-h3:mb-4 prose-p:leading-relaxed prose-a:transition-colors prose-a:duration-200 prose-strong:text-secondary prose-li:marker:text-secondary/60">
                <Content />
              </div>
            </>
          ) : (
            <!-- Regular content -->
            <div class="prose prose-lg max-w-none prose-headings:font-bold prose-h2:text-3xl prose-h2:mt-12 prose-h2:mb-6 prose-h3:text-2xl prose-h3:mt-8 prose-h3:mb-4 prose-p:leading-relaxed prose-a:transition-colors prose-a:duration-200 prose-strong:text-secondary prose-li:marker:text-secondary/60">
              <Content />
            </div>
          )}
        </div>
        
        <!-- Navigation -->
        <nav class="mt-12 flex items-center justify-between">
          <a href="/history/" class="btn btn-outline gap-2 group lg:hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:-translate-x-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Back to History
          </a>
          
          <div class="flex gap-3 ml-auto">
            <a href="/terms/" class="btn btn-ghost btn-sm">
              Glossary
            </a>
            <a href="/simulator/" class="btn btn-primary btn-sm">
              Launch Simulator
            </a>
          </div>
        </nav>
      </article>

      <!-- Related Content Section -->
      <section class="py-16 px-6 bg-gradient-to-t from-base-200 to-base-100">
        <div class="container max-w-6xl mx-auto text-center">
          <h2 class="text-3xl font-bold mb-8">Continue Exploring</h2>
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/history/" class="btn btn-outline btn-lg">
              More History Articles
            </a>
            <a href="/simulator/" class="btn btn-primary btn-lg group">
              <span>Launch Simulator</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </a>
          </div>
        </div>
      </section>
    </main>
  </div>
  
  <script>
    // Scroll to the active article in the sidebar on page load
    document.addEventListener('DOMContentLoaded', () => {
      const activeArticle = document.querySelector('.active-article');
      if (activeArticle) {
        const sidebar = document.getElementById('sidebar');
        
        // Make sure the parent collapse is expanded
        const parentCollapse = activeArticle.closest('.collapse');
        if (parentCollapse) {
          const input = parentCollapse.querySelector('input[type="radio"]');
          if (input) {
            input.checked = true;
          }
        }
        
        // Wait a bit for the collapse animation
        setTimeout(() => {
          const activeRect = activeArticle.getBoundingClientRect();
          const sidebarRect = sidebar.getBoundingClientRect();
          
          // Calculate the scroll position to center the active article in the viewport
          const scrollTop = activeArticle.offsetTop - (sidebar.clientHeight / 2) + (activeArticle.clientHeight / 2);
          
          // Scroll the sidebar
          sidebar.scrollTop = scrollTop;
        }, 100);
      }
      
      // Summary toggle functionality for articles with summary/full content
      const articleContent = document.getElementById('article-content');
      const summaryToggle = document.getElementById('summary-toggle');
      
      if (articleContent && summaryToggle) {
        let summaryContent = '';
        let fullContent = '';
        let showingSummary = false;
        
        // Split content at the marker
        const allNodes = Array.from(articleContent.childNodes);
        let foundMarker = false;
        
        allNodes.forEach(node => {
          if (node.nodeType === Node.COMMENT_NODE && node.textContent.trim() === 'SUMMARY_END') {
            foundMarker = true;
          } else if (!foundMarker) {
            summaryContent += node.outerHTML || node.textContent || '';
          } else {
            fullContent += node.outerHTML || node.textContent || '';
          }
        });
        
        // Store original full content (default view)
        const originalContent = articleContent.innerHTML;
        
        // Button click handler
        summaryToggle.addEventListener('click', () => {
          if (showingSummary) {
            // Switch to full article
            articleContent.innerHTML = fullContent;
            summaryToggle.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Show Summary
            `;
            showingSummary = false;
          } else {
            // Switch to summary
            articleContent.innerHTML = summaryContent;
            summaryToggle.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
              </svg>
              Show Full Article
            `;
            showingSummary = true;
          }
        });
        
        // Show full article by default
        if (fullContent) {
          articleContent.innerHTML = fullContent;
        }
      }
    });
  </script>
</BaseLayout>