---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const terms = await getCollection('terms');
  
  return terms.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry, allTerms: terms },
  }));
}

interface Props {
  entry: CollectionEntry<'terms'>;
  allTerms: CollectionEntry<'terms'>[];
}

const { entry, allTerms } = Astro.props;
const { Content } = await entry.render();

// Group terms by category for sidebar
const categories = {
  'Nuclear Physics': [
    'alpha-decay', 'binding-energy', 'critical-mass', 'fission', 
    'fusion', 'half-life', 'neutron-cross-section', 'plutonium'
  ],
  'Nuclear Effects': [
    'electromagnetic-pulse', 'ground-zero', 'megaton', 'nuclear-fallout',
    'nuclear-winter', 'yield'
  ],
  'Nuclear Technology': ['enrichment'],
  'Reactor Types': [
    'boiling-water-reactor', 'generation-iv', 'pressurized-water-reactor',
    'small-modular-reactors', 'thorium-cycle', 'tokamak'
  ],
  'Reactor Components': ['control-rods', 'coolant', 'moderator'],
  'Safety Systems': ['alara-principle', 'containment', 'defense-in-depth', 'scram'],
  'Weapons & Delivery Systems': [
    'first-strike', 'icbm', 'nuclear-triad', 'tactical-nuclear-weapons'
  ],
  'Strategy & Policy': ['mutual-assured-destruction', 'nuclear-deterrence'],
  'Treaties & Agreements': ['non-proliferation-treaty', 'start-treaty']
};

function getTermsByCategory(categoryTerms: string[]) {
  return allTerms.filter(term => categoryTerms.includes(term.slug))
    .sort((a, b) => a.data.title.localeCompare(b.data.title));
}

const currentSlug = entry.slug;
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="min-h-screen flex">
    <!-- Mobile Menu Toggle -->
    <button class="lg:hidden fixed bottom-4 left-4 z-50 btn btn-circle btn-primary shadow-lg" onclick="document.getElementById('sidebar').classList.toggle('-translate-x-full')">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>

    <!-- Sidebar -->
    <aside id="sidebar" class="fixed lg:sticky top-0 left-0 z-40 w-80 h-screen bg-base-200 border-r border-base-300 overflow-y-auto transition-transform -translate-x-full lg:translate-x-0">
      <div class="p-6">
        <div class="mb-6">
          <a href="/terms/" class="text-lg font-semibold text-primary hover:text-primary-focus transition-colors">
            ‚Üê All Glossary Terms
          </a>
        </div>
        
        <!-- Categories -->
        <div class="space-y-6">
          {Object.entries(categories).map(([categoryName, termSlugs]) => {
            const categoryTerms = getTermsByCategory(termSlugs);
            if (categoryTerms.length === 0) return null;
            
            return (
              <div class="space-y-2">
                <h3 class="text-sm font-bold text-base-content/60 uppercase tracking-wider">{categoryName}</h3>
                <ul class="space-y-1 ml-2">
                  {categoryTerms.map((term) => {
                    const isActive = term.slug === currentSlug;
                    return (
                      <li>
                        <a 
                          href={`/terms/${term.slug}/`}
                          class={`block text-sm py-1 px-2 rounded transition-all ${
                            isActive 
                              ? 'bg-primary text-primary-content font-medium active-article' 
                              : 'text-base-content/70 hover:text-base-content hover:bg-base-300'
                          }`}
                        >
                          {term.data.title}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </div>
            );
          })}
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 lg:ml-0">
      <!-- Hero Section -->
      <section class="relative py-16 px-6 bg-gradient-to-b from-base-200 to-base-100">
        <div class="absolute inset-0 opacity-5">
          <div class="absolute inset-0" style="background-image: radial-gradient(circle at 25% 25%, hsl(var(--p)) 0%, transparent 50%), radial-gradient(circle at 75% 75%, hsl(var(--s)) 0%, transparent 50%);"></div>
        </div>
        <div class="relative container max-w-4xl mx-auto">
          <div class="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 mb-4">
            <span class="text-primary text-sm font-medium">Glossary Term</span>
          </div>
          <h1 class="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            {entry.data.title}
          </h1>
          <p class="text-xl text-base-content/70 max-w-3xl">
            {entry.data.description}
          </p>
        </div>
      </section>

      <!-- Content Section -->
      <article class="container max-w-4xl mx-auto px-6 py-12">
        <div class="bg-base-100 rounded-3xl border border-base-300 p-8 md:p-12 shadow-xl">
          <!-- Content -->
          <div class="prose prose-lg max-w-none prose-headings:font-bold prose-h2:text-3xl prose-h2:mt-12 prose-h2:mb-6 prose-h3:text-2xl prose-h3:mt-8 prose-h3:mb-4 prose-p:leading-relaxed prose-a:transition-colors prose-a:duration-200 prose-strong:text-primary prose-li:marker:text-primary/60">
            <Content />
          </div>
        </div>
        
        <!-- Navigation -->
        <nav class="mt-12 flex items-center justify-between">
          <a href="/terms/" class="btn btn-outline gap-2 group lg:hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:-translate-x-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Back to Glossary
          </a>
          
          <div class="flex gap-3 ml-auto">
            <a href="/history/" class="btn btn-ghost btn-sm">
              History Articles
            </a>
            <a href="/simulator/" class="btn btn-primary btn-sm">
              Launch Simulator
            </a>
          </div>
        </nav>
      </article>

      <!-- Related Terms Section -->
      <section class="py-16 px-6 bg-gradient-to-t from-base-200 to-base-100">
        <div class="container max-w-6xl mx-auto text-center">
          <h2 class="text-3xl font-bold mb-8">Continue Learning</h2>
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/terms/" class="btn btn-outline btn-lg">
              Explore All Terms
            </a>
            <a href="/simulator/" class="btn btn-primary btn-lg group">
              <span>Try the Simulator</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </a>
          </div>
        </div>
      </section>
    </main>
  </div>
  
  <script>
    // Scroll to the active article in the sidebar on page load
    document.addEventListener('DOMContentLoaded', () => {
      const activeArticle = document.querySelector('.active-article');
      if (activeArticle) {
        const sidebar = document.getElementById('sidebar');
        const sidebarRect = sidebar.getBoundingClientRect();
        const activeRect = activeArticle.getBoundingClientRect();
        
        // Calculate the scroll position to center the active article in the viewport
        const scrollTop = activeArticle.offsetTop - (sidebar.clientHeight / 2) + (activeArticle.clientHeight / 2);
        
        // Scroll the sidebar
        sidebar.scrollTop = scrollTop;
      }
    });
  </script>
</BaseLayout>